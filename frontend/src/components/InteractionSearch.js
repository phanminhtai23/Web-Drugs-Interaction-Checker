import React, { useState, useEffect } from "react";
import axios from "../services/api";
import {
    TextField,
    Button,
    List,
    ListItem,
    // ListItemText,
    CircularProgress,
    Alert,
    Box,
    Typography,
    IconButton,
    Grid,
    Autocomplete,
    // Card,
    // CardContent,
    // CardHeader,
    Avatar,
    Snackbar,
} from "@mui/material";
import { Delete } from "@mui/icons-material";
import SearchIcon from "@mui/icons-material/Search";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";
import ErrorIcon from "@mui/icons-material/Error";
import InfoIcon from "@mui/icons-material/Info";
import RestartAltIcon from "@mui/icons-material/RestartAlt"; // Import icon cho n√∫t "B·∫Øt ƒë·∫ßu l·∫°i"
import PrescriptionUpload from "./PrescriptionUpload"; // Import component upload

const InteractionSearch = () => {
    const [drugName, setDrugName] = useState("");
    const [drugList, setDrugList] = useState([]);
    const [interactions, setInteractions] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");
    const [noInteractions, setNoInteractions] = useState(false);
    const [noDrugsFound, setNoDrugsFound] = useState(false);
    const [suggestions, setSuggestions] = useState([]);
    const [, setAllDrugs] = useState([]);
    const [showSuccessMessage, setShowSuccessMessage] = useState(false);
    const [successMessage, setSuccessMessage] = useState("");
    const [prescriptionFiles, setPrescriptionFiles] = useState([]); // State cho files toa thu·ªëc

    useEffect(() => {
        const fetchAllDrugs = async () => {
            try {
                const response = await axios.get("/drugs");
                setAllDrugs(response.data.map((drug) => drug.tenThuoc));
            } catch (error) {
                console.error("L·ªói khi l·∫•y danh s√°ch t·∫•t c·∫£ c√°c thu·ªëc:", error);
            }
        };

        fetchAllDrugs();
    }, []);

    const fetchSuggestions = async (keyword) => {
        if (!keyword) {
            setSuggestions([]);
            return;
        }
        try {
            const response = await axios.get(
                `/interactions/search?keyword=${keyword}`
            );
            setSuggestions(response.data.map((drug) => drug.tenThuoc)); // L·∫•y danh s√°ch t√™n thu·ªëc
        } catch (error) {
            console.error("L·ªói khi l·∫•y g·ª£i √Ω t√™n thu·ªëc:", error);
        }
    };

    const handleAddDrug = () => {
        // Ch·ªâ cho ph√©p th√™m thu·ªëc n·∫øu c√≥ trong danh s√°ch g·ª£i √Ω
        if (
            drugName.trim() &&
            suggestions.includes(drugName.trim()) &&
            !drugList.includes(drugName.trim())
        ) {
            setDrugList([...drugList, drugName.trim()]); // Th√™m thu·ªëc v√†o danh s√°ch
        }
        setDrugName(""); // Reset thanh nh·∫≠p t√™n thu·ªëc
    };

    const handleRemoveDrug = (drug) => {
        setDrugList(drugList.filter((d) => d !== drug));
    };

    // X·ª≠ l√Ω khi files toa thu·ªëc ƒë∆∞·ª£c ph√¢n t√≠ch xong
    const handlePrescriptionFilesUploaded = (result) => {
        setPrescriptionFiles(result.originalFiles || []);

        console.log("\nüî• D·ªÆ LI·ªÜU NH·∫¨N ƒê∆Ø·ª¢C T·ª™ PRESCRIPTION UPLOAD:");
        console.log("API Result:", result.apiResult);
        console.log("Detected Drugs:", result.detectedDrugs);

        // N·∫øu c√≥ thu·ªëc ƒë∆∞·ª£c ph√°t hi·ªán, t·ª± ƒë·ªông th√™m v√†o danh s√°ch
        if (result.shouldAddToDrugList && result.detectedDrugs && result.detectedDrugs.length > 0) {
            const newDrugs = result.detectedDrugs.filter(drug => 
                drug && drug.trim() && !drugList.includes(drug.trim())
            );
            
            if (newDrugs.length > 0) {
                setDrugList(prev => [...prev, ...newDrugs.map(drug => drug.trim())]);
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                setSuccessMessage(
                    `‚úÖ ƒê√£ th√™m ${newDrugs.length} thu·ªëc v√†o danh s√°ch: ${newDrugs.join(', ')}`
                );
                setShowSuccessMessage(true);

                console.log("üéØ ƒê√£ th√™m thu·ªëc v√†o danh s√°ch:", newDrugs);
            }
        }
    };

    const handleCheckInteractions = async () => {
        setError("");
        setInteractions([]);
        setNoInteractions(false);
        setNoDrugsFound(false); // Reset tr·∫°ng th√°i c·∫£nh b√°o

        if (drugList.length < 2) {
            // Ki·ªÉm tra n·∫øu danh s√°ch thu·ªëc c√≥ √≠t h∆°n 2 t√™n
            setError(
                "Vui l√≤ng nh·∫≠p √≠t nh·∫•t 2 t√™n thu·ªëc ƒë·ªÉ ki·ªÉm tra t∆∞∆°ng t√°c."
            );
            return;
        }

        setLoading(true);
        try {
            const response = await axios.post("/interactions", {
                drugNames: drugList,
            });

            if (response.data.length === 0) {
                setNoInteractions(true);
            } else {
                setInteractions(response.data);
            }
        } catch (err) {
            if (
                err.response?.data?.message ===
                "No drugs found with the provided names"
            ) {
                setNoDrugsFound(true); // Hi·ªÉn th·ªã c·∫£nh b√°o "Kh√¥ng t√¨m th·∫•y thu·ªëc"
            } else if (
                err.response?.data?.message ===
                "No interactions found for the provided drugs"
            ) {
                setNoInteractions(true);
            } else {
                setError(
                    err.response?.data?.message ||
                        "Unable to retrieve interaction information. Please try again."
                );
            }
        } finally {
            setLoading(false);
        }
    };

    // const handleKeyPress = (event) => {
    //   if (event.key === 'Enter') {
    //     handleAddDrug();
    //   }
    // };

    const handleSaveHistory = async () => {
        try {
            const historyData = {
                drugs_checked: drugList,
                interactions: interactions.map((interaction) => ({
                    drug_a: interaction.HoatChat_1,
                    drug_b: interaction.HoatChat_2,
                    effect: interaction.CanhBaoTuongTacThuoc,
                    severity: interaction.MucDoNghiemTrong,
                })),
                recommendations:
                    "Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© tr∆∞·ªõc khi thay ƒë·ªïi thu·ªëc.",
            };

            await axios.post("/interaction-history", historyData);
            alert("L·ªãch s·ª≠ ki·ªÉm tra ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
        } catch (error) {
            console.error("Error saving interaction history:", error);
            alert("Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ ki·ªÉm tra. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    return (
        <Box
            sx={{
                maxWidth: { xs: "100%", sm: "900px", md: "1000px" },
                mx: "auto",
                mt: 5,
                p: { xs: 2, sm: 3 },
                backgroundColor: "#fff",
                borderRadius: 4,
                border: "1px solid #e0e0e0", // Th√™m vi·ªÅn nh·∫π
            }}
        >
            <Box
                sx={{
                    display: "flex",
                    flexDirection: { xs: "column", sm: "row" },
                    alignItems: { xs: "stretch", sm: "center" },
                    mb: 3,
                    gap: { xs: 2, sm: 0 },
                }}
            >
                <Autocomplete
                    options={suggestions}
                    inputValue={drugName}
                    onInputChange={(event, value, reason) => {
                        if (reason === "input") {
                            setDrugName(value);
                            fetchSuggestions(value);
                        } else if (reason === "clear") {
                            setDrugName("");
                        }
                        // reason === "reset" (sau khi ch·ªçn option) -> b·ªè qua, ƒë·ªÉ kh√¥ng ghi ƒë√® "".
                    }}
                    onChange={(event, value) => {
                        if (value && !drugList.includes(value)) {
                            setDrugList([...drugList, value]);
                            setSuccessMessage(
                                `ƒê√£ th√™m thu·ªëc "${value}" v√†o danh s√°ch`
                            );
                            setShowSuccessMessage(true);
                        }
                        setDrugName(""); // reset sau ch·ªçn

                        // setSuggestions([]); // t√πy ch·ªçn: ƒë√≥ng dropdown
                    }}
                    filterOptions={(x) => x} // gi·ªØ nguy√™n danh s√°ch t·ª´ server
                    renderInput={(params) => (
                        <TextField
                            {...params}
                            label="Nh·∫≠p t√™n thu·ªëc"
                            variant="outlined"
                            fullWidth
                            // onKeyPress={(event) => {
                            //     if (event.key === "Enter") {
                            //         handleAddDrug();
                            //     }
                            // }}
                            sx={{
                                "& .MuiOutlinedInput-root": { borderRadius: 3 },
                            }}
                        />
                    )}
                    sx={{
                        flex: 1,
                        mr: 2,
                        "& .MuiAutocomplete-inputRoot": {
                            paddingRight: "40px !important",
                        },
                    }}
                />

                <Box
                    sx={{
                        display: "flex",
                        gap: 1,
                        flexDirection: { xs: "column", sm: "row" },
                    }}
                >
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={handleAddDrug}
                        startIcon={<SearchIcon />}
                        sx={{
                            py: { xs: 1.5, sm: 1.8 },
                            px: { xs: 3, sm: 4 },
                            height: { xs: "56px", sm: "60px" }, // ƒê·ªìng b·ªô chi·ªÅu cao v·ªõi TextField
                            minWidth: { xs: "100%", sm: "140px" },
                            background:
                                "linear-gradient(90deg, #1976d2, #155a9c)",
                            color: "#fff",
                            fontWeight: "bold",
                            fontSize: { xs: "0.95rem", sm: "1rem" },
                            textTransform: "none",
                            borderRadius: 3,
                            "&:hover": {
                                background:
                                    "linear-gradient(90deg, #155a9c, #1976d2)",
                            },
                        }}
                    >
                        Th√™m v√†o
                    </Button>

                    {/* Component Upload Toa thu·ªëc */}
                    <PrescriptionUpload
                        onFilesUploaded={handlePrescriptionFilesUploaded}
                    />
                </Box>
            </Box>

            {/* Danh s√°ch thu·ªëc */}
            {drugList.length > 0 && (
                <Box sx={{ mb: 3 }}>
                    <Box
                        sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            mb: 1,
                            flexDirection: { xs: "column", sm: "row" },
                            gap: { xs: 1, sm: 0 },
                        }}
                    >
                        <Typography
                            variant="subtitle1"
                            sx={{
                                fontWeight: "bold",
                                fontSize: { xs: "1rem", sm: "1.1rem" },
                            }}
                        >
                            Danh s√°ch t∆∞∆°ng t√°c ch∆∞a l∆∞u
                        </Typography>
                        <Button
                            variant="text"
                            color="primary"
                            startIcon={<RestartAltIcon />}
                            onClick={() => {
                                setDrugList([]); // X√≥a to√†n b·ªô danh s√°ch thu·ªëc
                                setInteractions([]); // Thu h·ªìi k·∫øt qu·∫£ ki·ªÉm tra t∆∞∆°ng t√°c
                                setNoInteractions(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i kh√¥ng c√≥ t∆∞∆°ng t√°c
                                setNoDrugsFound(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i kh√¥ng t√¨m th·∫•y thu·ªëc
                                setError(""); // X√≥a th√¥ng b√°o l·ªói
                            }}
                            sx={{
                                textTransform: "none",
                                fontWeight: "bold",
                                fontSize: { xs: "0.9rem", sm: "1rem" },
                                minWidth: { xs: "auto", sm: "120px" },
                            }}
                        >
                            B·∫Øt ƒë·∫ßu l·∫°i
                        </Button>
                    </Box>
                    <List>
                        {drugList.map((drug, index) => (
                            <ListItem
                                key={index}
                                sx={{
                                    borderBottom: "1px solid #e0e0e0", // ƒê∆∞·ªùng k·∫ª d∆∞·ªõi m·ªói thu·ªëc
                                    py: { xs: 1.5, sm: 1 },
                                    px: { xs: 1, sm: 0 },
                                    display: "flex",
                                    justifyContent: "space-between",
                                    alignItems: "center",
                                    borderRadius: 1,
                                    "&:hover": {
                                        backgroundColor: "#f5f5f5",
                                    },
                                }}
                            >
                                <Typography
                                    variant="body1"
                                    sx={{
                                        color: "#1976d2",
                                        fontSize: { xs: "0.95rem", sm: "1rem" },
                                        fontWeight: 500,
                                    }}
                                >
                                    {drug}
                                </Typography>
                                <IconButton
                                    edge="end"
                                    onClick={() => {
                                        handleRemoveDrug(drug);
                                        setInteractions([]); // Thu h·ªìi k·∫øt qu·∫£ ki·ªÉm tra t∆∞∆°ng t√°c
                                        setNoInteractions(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i kh√¥ng c√≥ t∆∞∆°ng t√°c
                                        setNoDrugsFound(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i kh√¥ng t√¨m th·∫•y thu·ªëc
                                        setError(""); // X√≥a th√¥ng b√°o l·ªói
                                    }}
                                >
                                    <Delete sx={{ color: "#d32f2f" }} />
                                </IconButton>
                            </ListItem>
                        ))}
                    </List>
                </Box>
            )}

            {/* C·∫£nh b√°o "No drugs found" */}
            {noDrugsFound && (
                <Alert severity="warning" sx={{ mt: 3 }}>
                    Kh√¥ng t√¨m th·∫•y thu·ªëc n√†o trong c∆° s·ªü d·ªØ li·ªáu v·ªõi t√™n ƒë√£
                    nh·∫≠p. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n thu·ªëc.
                </Alert>
            )}

            {/* N√∫t ki·ªÉm tra t∆∞∆°ng t√°c */}
            <Box
                sx={{
                    display: "flex",
                    flexDirection: { xs: "column", sm: "row" },
                    gap: { xs: 2, sm: 1 },
                    mt: 3,
                }}
            >
                <Button
                    variant="contained"
                    color="primary"
                    onClick={handleCheckInteractions}
                    disabled={loading}
                    sx={{
                        flex: { xs: "1", sm: "auto" },
                        py: { xs: 1.5, sm: 1.2 },
                        px: { xs: 3, sm: 4 },
                        minWidth: { xs: "100%", sm: "180px" },
                        fontSize: { xs: "1rem", sm: "1.1rem" },
                        background: "linear-gradient(90deg, #1976d2, #155a9c)",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "none",
                        borderRadius: 3,
                        "&:hover": {
                            background:
                                "linear-gradient(90deg, #155a9c, #1976d2)",
                        },
                    }}
                >
                    {loading ? (
                        <CircularProgress size={24} color="inherit" />
                    ) : (
                        "Ki·ªÉm tra t∆∞∆°ng t√°c"
                    )}
                </Button>
                <Button
                    variant="contained"
                    color="secondary"
                    onClick={handleSaveHistory}
                    disabled={loading || interactions.length === 0}
                    sx={{
                        flex: { xs: "1", sm: "auto" },
                        py: { xs: 1.5, sm: 1.2 },
                        px: { xs: 3, sm: 4 },
                        minWidth: { xs: "100%", sm: "140px" },
                        fontSize: { xs: "1rem", sm: "1.1rem" },
                        background:
                            "linear-gradient(90deg, #DDEAEBFF, #7E8787FF)",
                        color: "#fff",
                        fontWeight: "bold",
                        textTransform: "none",
                        borderRadius: 3,
                        "&:hover": {
                            background:
                                "linear-gradient(90deg, #7E8787FF, #DDEAEBFF)",
                        },
                    }}
                >
                    L∆∞u l·ªãch s·ª≠
                </Button>
            </Box>
            {error && (
                <Alert severity="error" sx={{ mt: 3 }}>
                    {error}
                </Alert>
            )}
            {/* K·∫øt qu·∫£ t∆∞∆°ng t√°c */}
            {noInteractions && (
                <Box sx={{ mt: 3, textAlign: "center" }}>
                    <WarningAmberIcon
                        color="warning"
                        sx={{ fontSize: 40, mb: 1 }}
                    />
                    <Typography variant="h6" sx={{ mb: 2 }}>
                        Kh√¥ng t√¨m th·∫•y t∆∞∆°ng t√°c thu·ªëc n√†o.
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Tuy nhi√™n, ƒëi·ªÅu n√†y kh√¥ng c√≥ nghƒ©a l√† kh√¥ng c√≥ t∆∞∆°ng t√°c
                        thu·ªëc t·ªìn t·∫°i. Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.
                    </Typography>
                </Box>
            )}
            {interactions.length > 0 && (
                <Box sx={{ mt: 3 }}>
                    {/* Danh s√°ch k·∫øt qu·∫£ t∆∞∆°ng t√°c */}
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold" }}>
                        T∆∞∆°ng t√°c gi·ªØa c√°c lo·∫°i thu·ªëc c·ªßa b·∫°n
                    </Typography>
                    <Grid container spacing={2}>
                        {interactions.map((interaction, index) => (
                            <Grid item xs={12} key={index}>
                                <Box
                                    sx={{
                                        display: "flex",
                                        alignItems: "flex-start",
                                        gap: 2,
                                        p: 2,
                                        backgroundColor:
                                            interaction.MucDoNghiemTrong ===
                                            "Nghi√™m tr·ªçng"
                                                ? "#fdecea"
                                                : interaction.MucDoNghiemTrong ===
                                                  "Trung b√¨nh"
                                                ? "#fff4e5"
                                                : interaction.MucDoNghiemTrong ===
                                                  "Nh·∫π"
                                                ? "#e8f5e9"
                                                : "#f5f5f5",
                                        borderRadius: 2,
                                        border:
                                            interaction.MucDoNghiemTrong ===
                                            "Nghi√™m tr·ªçng"
                                                ? "1px solid #f5c6cb"
                                                : interaction.MucDoNghiemTrong ===
                                                  "Trung b√¨nh"
                                                ? "1px solid #ffeeba"
                                                : interaction.MucDoNghiemTrong ===
                                                  "Nh·∫π"
                                                ? "1px solid #c8e6c9"
                                                : "1px solid #e0e0e0",
                                        boxShadow:
                                            "0px 4px 10px rgba(0, 0, 0, 0.1)",
                                    }}
                                >
                                    <Avatar
                                        sx={{
                                            backgroundColor:
                                                interaction.MucDoNghiemTrong ===
                                                "Nghi√™m tr·ªçng"
                                                    ? "error.main"
                                                    : interaction.MucDoNghiemTrong ===
                                                      "Trung b√¨nh"
                                                    ? "warning.main"
                                                    : interaction.MucDoNghiemTrong ===
                                                      "Nh·∫π"
                                                    ? "info.main"
                                                    : "grey.500",
                                            width: 48,
                                            height: 48,
                                        }}
                                    >
                                        {interaction.MucDoNghiemTrong ===
                                        "Nghi√™m tr·ªçng" ? (
                                            <ErrorIcon />
                                        ) : interaction.MucDoNghiemTrong ===
                                          "Trung b√¨nh" ? (
                                            <WarningAmberIcon />
                                        ) : (
                                            <InfoIcon />
                                        )}
                                    </Avatar>
                                    <Box>
                                        <Typography
                                            variant="h6"
                                            sx={{
                                                fontWeight: "bold",
                                                color:
                                                    interaction.MucDoNghiemTrong ===
                                                    "Nghi√™m tr·ªçng"
                                                        ? "error.main"
                                                        : interaction.MucDoNghiemTrong ===
                                                          "Trung b√¨nh"
                                                        ? "warning.main"
                                                        : interaction.MucDoNghiemTrong ===
                                                          "Nh·∫π"
                                                        ? "info.main"
                                                        : "grey.700",
                                            }}
                                        >
                                            {interaction.MucDoNghiemTrong}
                                        </Typography>
                                        <Typography
                                            variant="body1"
                                            sx={{ fontWeight: "bold", mb: 1 }}
                                        >
                                            {interaction.HoatChat_1} ‚Üî{" "}
                                            {interaction.HoatChat_2}
                                        </Typography>
                                        {/* <Typography variant="body2" color="textSecondary" sx={{ mb: 1 }}>
                √Åp d·ª•ng cho: {interaction.TenThuoc}
              </Typography> */}
                                        <Typography
                                            variant="body2"
                                            color="textSecondary"
                                        >
                                            {interaction.CanhBaoTuongTacThuoc}
                                        </Typography>
                                        <Typography
                                            variant="body2"
                                            color="textSecondary"
                                            sx={{ mt: 1 }}
                                        >
                                            <strong>L∆∞u √Ω:</strong> Lu√¥n tham
                                            kh·∫£o √Ω ki·∫øn b√°c sƒ© tr∆∞·ªõc khi thay
                                            ƒë·ªïi ho·∫∑c ng·ª´ng s·ª≠ d·ª•ng b·∫•t k·ª≥ lo·∫°i
                                            thu·ªëc n√†o.
                                        </Typography>
                                    </Box>
                                </Box>
                            </Grid>
                        ))}
                    </Grid>
                    {/* Ph√¢n lo·∫°i t∆∞∆°ng t√°c thu·ªëc */}
                    <Box
                        sx={{
                            mt: 3,
                            p: 3,
                            backgroundColor: "#f9f9f9",
                            borderRadius: 3,
                            border: "1px solid #e0e0e0",
                            boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
                        }}
                    >
                        <Typography
                            variant="h6"
                            sx={{ fontWeight: "bold", mb: 2 }}
                        >
                            Ph√¢n lo·∫°i t∆∞∆°ng t√°c thu·ªëc
                        </Typography>
                        <Typography
                            variant="body2"
                            color="textSecondary"
                            sx={{ mb: 3 }}
                        >
                            Nh·ªØng ph√¢n lo·∫°i n√†y ch·ªâ mang t√≠nh h∆∞·ªõng d·∫´n. M·ª©c ƒë·ªô
                            li√™n quan c·ªßa t∆∞∆°ng t√°c thu·ªëc c·ª• th·ªÉ v·ªõi m·ªôt c√° nh√¢n
                            c·ª• th·ªÉ r·∫•t kh√≥ x√°c ƒë·ªãnh. Lu√¥n tham kh·∫£o √Ω ki·∫øn c·ªßa
                            nh√† cung c·∫•p d·ªãch v·ª• chƒÉm s√≥c s·ª©c kh·ªèe tr∆∞·ªõc khi b·∫Øt
                            ƒë·∫ßu ho·∫∑c ng·ª´ng b·∫•t k·ª≥ lo·∫°i thu·ªëc n√†o.
                        </Typography>
                        <Box
                            sx={{
                                display: "flex",
                                flexDirection: "column",
                                gap: 2,
                            }}
                        >
                            {/* Nghi√™m tr·ªçng */}
                            <Box
                                sx={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: 2,
                                    p: 2,
                                    backgroundColor: "#fdecea",
                                    borderRadius: 2,
                                    border: "1px solid #f5c6cb",
                                }}
                            >
                                <ErrorIcon
                                    sx={{ color: "error.main", fontSize: 30 }}
                                />
                                <Box>
                                    <Typography
                                        variant="body1"
                                        sx={{
                                            fontWeight: "bold",
                                            color: "error.main",
                                        }}
                                    >
                                        Nghi√™m tr·ªçng
                                    </Typography>
                                    <Typography
                                        variant="body2"
                                        color="textSecondary"
                                    >
                                        C√≥ √Ω nghƒ©a l√¢m s√†ng cao. Tr√°nh k·∫øt h·ª£p;
                                        nguy c∆° t∆∞∆°ng t√°c l·ªõn h∆°n l·ª£i √≠ch.
                                    </Typography>
                                </Box>
                            </Box>

                            {/* Trung b√¨nh */}
                            <Box
                                sx={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: 2,
                                    p: 2,
                                    backgroundColor: "#fff4e5",
                                    borderRadius: 2,
                                    border: "1px solid #ffeeba",
                                }}
                            >
                                <WarningAmberIcon
                                    sx={{ color: "warning.main", fontSize: 30 }}
                                />
                                <Box>
                                    <Typography
                                        variant="body1"
                                        sx={{
                                            fontWeight: "bold",
                                            color: "warning.main",
                                        }}
                                    >
                                        Trung b√¨nh
                                    </Typography>
                                    <Typography
                                        variant="body2"
                                        color="textSecondary"
                                    >
                                        C√≥ √Ω nghƒ©a l√¢m s√†ng ·ªü m·ª©c trung b√¨nh.
                                        Th∆∞·ªùng tr√°nh k·∫øt h·ª£p; ch·ªâ s·ª≠ d·ª•ng trong
                                        nh·ªØng tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát.
                                    </Typography>
                                </Box>
                            </Box>

                            {/* Nh·∫π */}
                            <Box
                                sx={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: 2,
                                    p: 2,
                                    backgroundColor: "#e8f5e9",
                                    borderRadius: 2,
                                    border: "1px solid #c8e6c9",
                                }}
                            >
                                <InfoIcon
                                    sx={{ color: "info.main", fontSize: 30 }}
                                />
                                <Box>
                                    <Typography
                                        variant="body1"
                                        sx={{
                                            fontWeight: "bold",
                                            color: "info.main",
                                        }}
                                    >
                                        Nh·∫π
                                    </Typography>
                                    <Typography
                                        variant="body2"
                                        color="textSecondary"
                                    >
                                        C√≥ √Ω nghƒ©a l√¢m s√†ng t·ªëi thi·ªÉu. Gi·∫£m
                                        thi·ªÉu r·ªßi ro; ƒë√°nh gi√° r·ªßi ro v√† c√¢n
                                        nh·∫Øc thu·ªëc thay th·∫ø.
                                    </Typography>
                                </Box>
                            </Box>

                            {/* Kh√¥ng x√°c ƒë·ªãnh */}
                            <Box
                                sx={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: 2,
                                    p: 2,
                                    backgroundColor: "#f5f5f5",
                                    borderRadius: 2,
                                    border: "1px solid #e0e0e0",
                                }}
                            >
                                <InfoIcon
                                    sx={{ color: "grey.500", fontSize: 30 }}
                                />
                                <Box>
                                    <Typography
                                        variant="body1"
                                        sx={{
                                            fontWeight: "bold",
                                            color: "grey.700",
                                        }}
                                    >
                                        Kh√¥ng x√°c ƒë·ªãnh
                                    </Typography>
                                    <Typography
                                        variant="body2"
                                        color="textSecondary"
                                    >
                                        Kh√¥ng c√≥ th√¥ng tin t∆∞∆°ng t√°c n√†o c√≥ s·∫µn.
                                    </Typography>
                                </Box>
                            </Box>
                        </Box>
                    </Box>
                </Box>
            )}
            {/* Snackbar for success message */}
            <Snackbar
                open={showSuccessMessage}
                autoHideDuration={3000}
                onClose={() => setShowSuccessMessage(false)}
                anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
            >
                <Alert
                    onClose={() => setShowSuccessMessage(false)}
                    severity="success"
                    sx={{ width: "100%" }}
                >
                    {successMessage}
                </Alert>
            </Snackbar>
        </Box>
    );
};

export default InteractionSearch;
